name: Lighthouse CI
on:
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to audit (default: homepage)'
        required: false
        default: 'https://jonathanronn.netlify.app/'

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: ${{ inputs.url }}
          temporaryPublicStorage: true
          
      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports
          path: ${{ github.workspace }}/lighthouse-results
          
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v6
        with:
          script: |
            const results = ${{ steps.lighthouse_audit.outputs.manifest }}
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            
            if (!results || !links) {
              console.log('No lighthouse results found');
              return;
            }
            
            let commentBody = '## üö¶ Lighthouse Audit Results\n\n';
            
            for (const [url, link] of Object.entries(links)) {
              const result = results.find(r => r.url === url);
              if (!result || !result.summary) continue;
              
              const { summary, performance, accessibility, 'best-practices': bestPractices, seo, pwa } = result.summary;
              commentBody += `### ${url}\n`;
              commentBody += `‚≠ê [Lighthouse report](${link})\n\n`;
              commentBody += `| Category | Score |\n| --- | --- |\n`;
              commentBody += `| Performance | ${Math.round(performance * 100)}/100 |\n`;
              commentBody += `| Accessibility | ${Math.round(accessibility * 100)}/100 |\n`;
              commentBody += `| Best practices | ${Math.round(bestPractices * 100)}/100 |\n`;
              commentBody += `| SEO | ${Math.round(seo * 100)}/100 |\n`;
              commentBody += `| PWA | ${Math.round(pwa * 100)}/100 |\n\n`;
            }
            
            core.setOutput('comment', commentBody);
            
      - name: Comment on commit
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }} 